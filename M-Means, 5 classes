import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import numpy as np

# Caminho do arquivo
arquivo = r"C:\Python\Ranking_Aerodromos_2024.xlsx"

# Leitura da aba "TMA"
df = pd.read_excel(arquivo, sheet_name="TMA")

# Seleção e padronização
X = df[["Movimento"]].copy()
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Clusterização com k=5
k = 5
kmeans = KMeans(n_clusters=k, random_state=42, n_init='auto')
df["Cluster"] = kmeans.fit_predict(X_scaled)

# Centróides reais (despadronizados)
centroides = scaler.inverse_transform(kmeans.cluster_centers_).flatten()

# Ordenar clusters do maior para o menor movimento
ordem_clusters = np.argsort(centroides)[::-1]  # Inverso do padrão
cluster_para_classe = {cluster: classe + 1 for classe, cluster in enumerate(ordem_clusters)}

# Mapear para classe 1 (maior movimento) a classe 5 (menor)
df["Classe"] = df["Cluster"].map(cluster_para_classe)

# Exibir pontos de corte
print("Pontos de corte por classe (baseado nos centróides):")
for cluster in ordem_clusters:
    classe = cluster_para_classe[cluster]
    print(f"Classe {classe}: {int(centroides[cluster])} movimentos")

# Exibir TMA por classe
print("\nTMA por Classe (Classe 1 = Maior Movimento):")
tabela_classes = df[["Ranking", "Indicativo", "Denominação", "Movimento", "Classe"]].sort_values("Classe")
print(tabela_classes.to_string(index=False))

# Gráfico
plt.figure(figsize=(10, 6))
for classe in range(1, 6):
    grupo = df[df["Classe"] == classe]
    plt.scatter(grupo["Ranking"], grupo["Movimento"], label=f"Classe {classe}", s=70)
plt.title("Clusterização K-Means (k=5) - Classificação das TMA (Maior p/ Menor)")
plt.xlabel("Ranking")
plt.ylabel("Movimento")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
